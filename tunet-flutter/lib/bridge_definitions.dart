// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<String> fluxToString({required int f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFluxToStringConstMeta;

  Future<Runtime> newStaticMethodRuntime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodRuntimeConstMeta;

  Stream<UpdateMsgWrap> startMethodRuntime(
      {required Runtime that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartMethodRuntimeConstMeta;

  Future<void> queueFluxMethodRuntime({required Runtime that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueueFluxMethodRuntimeConstMeta;

  Future<NetFlux> fluxMethodRuntime({required Runtime that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFluxMethodRuntimeConstMeta;

  Future<NetStateWrap> stateMethodRuntime(
      {required Runtime that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStateMethodRuntimeConstMeta;

  DropFnType get dropOpaqueMutexModel;
  ShareFnType get shareOpaqueMutexModel;
  OpaqueTypeFinalizer get MutexModelFinalizer;

  DropFnType get dropOpaqueMutexOptionHandle;
  ShareFnType get shareOpaqueMutexOptionHandle;
  OpaqueTypeFinalizer get MutexOptionHandleFinalizer;

  DropFnType get dropOpaqueMutexOptionMpscReceiverAction;
  ShareFnType get shareOpaqueMutexOptionMpscReceiverAction;
  OpaqueTypeFinalizer get MutexOptionMpscReceiverActionFinalizer;
}

@sealed
class MutexModel extends FrbOpaque {
  final Native bridge;
  MutexModel.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexModel;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexModel;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexModelFinalizer;
}

@sealed
class MutexOptionHandle extends FrbOpaque {
  final Native bridge;
  MutexOptionHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexOptionHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexOptionHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexOptionHandleFinalizer;
}

@sealed
class MutexOptionMpscReceiverAction extends FrbOpaque {
  final Native bridge;
  MutexOptionMpscReceiverAction.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexOptionMpscReceiverAction;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexOptionMpscReceiverAction;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.MutexOptionMpscReceiverActionFinalizer;
}

class Balance {
  final double field0;

  const Balance({
    required this.field0,
  });
}

class Flux {
  final int field0;

  const Flux({
    required this.field0,
  });
}

class NetFlux {
  final String username;
  final Flux flux;
  final NewDuration onlineTime;
  final Balance balance;

  const NetFlux({
    required this.username,
    required this.flux,
    required this.onlineTime,
    required this.balance,
  });
}

enum NetState {
  Unknown,
  Net,
  Auth4,
  Auth6,
}

class NetStateWrap {
  final NetState field0;

  const NetStateWrap({
    required this.field0,
  });
}

class NewDuration {
  final Duration field0;

  const NewDuration({
    required this.field0,
  });
}

class Runtime {
  final Native bridge;
  final MutexOptionMpscReceiverAction rx;
  final MutexModel model;
  final MutexOptionHandle handle;

  const Runtime({
    required this.bridge,
    required this.rx,
    required this.model,
    required this.handle,
  });

  static Future<Runtime> newRuntime({required Native bridge, dynamic hint}) =>
      bridge.newStaticMethodRuntime(hint: hint);

  Stream<UpdateMsgWrap> start({dynamic hint}) => bridge.startMethodRuntime(
        that: this,
      );

  Future<void> queueFlux({dynamic hint}) => bridge.queueFluxMethodRuntime(
        that: this,
      );

  Future<NetFlux> flux({dynamic hint}) => bridge.fluxMethodRuntime(
        that: this,
      );

  Future<NetStateWrap> state({dynamic hint}) => bridge.stateMethodRuntime(
        that: this,
      );
}

enum UpdateMsg {
  Credential,
  State,
  Status,
  Log,
  Flux,
  Online,
  Details,
  LogBusy,
  OnlineBusy,
  DetailBusy,
}

class UpdateMsgWrap {
  final UpdateMsg field0;

  const UpdateMsgWrap({
    required this.field0,
  });
}
