// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> fluxToString({required int f, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(f);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_flux_to_string(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kFluxToStringConstMeta,
      argValues: [f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFluxToStringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "flux_to_string",
        argNames: ["f"],
      );

  Future<RuntimeStartConfig> newStaticMethodRuntimeStartConfig(
      {required NetStatusSimp status,
      String? ssid,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = api2wire_net_status_simp(status);
    var arg1 = _platform.api2wire_opt_String(ssid);
    var arg2 = _platform.api2wire_String(username);
    var arg3 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__RuntimeStartConfig(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_runtime_start_config(d),
      constMeta: kNewStaticMethodRuntimeStartConfigConstMeta,
      argValues: [status, ssid, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodRuntimeStartConfigConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__RuntimeStartConfig",
            argNames: ["status", "ssid", "username", "password"],
          );

  Future<Runtime> newStaticMethodRuntime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__Runtime(port_),
      parseSuccessData: (d) => _wire2api_runtime(d),
      constMeta: kNewStaticMethodRuntimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__Runtime",
        argNames: [],
      );

  Stream<UpdateMsgWrap> startMethodRuntime(
      {required Runtime that,
      required RuntimeStartConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    var arg1 = _platform.api2wire_box_autoadd_runtime_start_config(config);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start__method__Runtime(port_, arg0, arg1),
      parseSuccessData: _wire2api_update_msg_wrap,
      constMeta: kStartMethodRuntimeConstMeta,
      argValues: [that, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start__method__Runtime",
        argNames: ["that", "config"],
      );

  Future<void> queueCredentialMethodRuntime(
      {required Runtime that,
      required String u,
      required String p,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    var arg1 = _platform.api2wire_String(u);
    var arg2 = _platform.api2wire_String(p);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_queue_credential__method__Runtime(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueCredentialMethodRuntimeConstMeta,
      argValues: [that, u, p],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueCredentialMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_credential__method__Runtime",
        argNames: ["that", "u", "p"],
      );

  Future<void> queueLoginMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_queue_login__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueLoginMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueLoginMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_login__method__Runtime",
        argNames: ["that"],
      );

  Future<void> queueLogoutMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_queue_logout__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueLogoutMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueLogoutMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_logout__method__Runtime",
        argNames: ["that"],
      );

  Future<void> queueFluxMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_queue_flux__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueFluxMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueFluxMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_flux__method__Runtime",
        argNames: ["that"],
      );

  Future<void> queueStateMethodRuntime(
      {required Runtime that, NetStateWrap? s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    var arg1 = _platform.api2wire_opt_box_autoadd_net_state_wrap(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_queue_state__method__Runtime(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueStateMethodRuntimeConstMeta,
      argValues: [that, s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueStateMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_state__method__Runtime",
        argNames: ["that", "s"],
      );

  Future<void> queueDetailsMethodRuntime(
      {required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_queue_details__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueDetailsMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueDetailsMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue_details__method__Runtime",
        argNames: ["that"],
      );

  Future<bool> logBusyMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_log_busy__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kLogBusyMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLogBusyMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "log_busy__method__Runtime",
        argNames: ["that"],
      );

  Future<String> logTextMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_log_text__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kLogTextMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLogTextMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "log_text__method__Runtime",
        argNames: ["that"],
      );

  Future<NetFlux> fluxMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_flux__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_net_flux,
      constMeta: kFluxMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFluxMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "flux__method__Runtime",
        argNames: ["that"],
      );

  Future<NetStateWrap> stateMethodRuntime(
      {required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_state__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_net_state_wrap,
      constMeta: kStateMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStateMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "state__method__Runtime",
        argNames: ["that"],
      );

  Future<String> statusMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_status__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kStatusMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStatusMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "status__method__Runtime",
        argNames: ["that"],
      );

  Future<List<NetDetail>> detailsMethodRuntime(
      {required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_details__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_list_net_detail,
      constMeta: kDetailsMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDetailsMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "details__method__Runtime",
        argNames: ["that"],
      );

  Future<DetailDailyWrap?> detailDailyMethodRuntime(
      {required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_detail_daily__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_detail_daily_wrap,
      constMeta: kDetailDailyMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDetailDailyMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "detail_daily__method__Runtime",
        argNames: ["that"],
      );

  Future<String> usernameMethodRuntime({required Runtime that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_runtime(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_username__method__Runtime(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kUsernameMethodRuntimeConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUsernameMethodRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "username__method__Runtime",
        argNames: ["that"],
      );

  DropFnType get dropOpaqueMutexModel => _platform.inner.drop_opaque_MutexModel;
  ShareFnType get shareOpaqueMutexModel =>
      _platform.inner.share_opaque_MutexModel;
  OpaqueTypeFinalizer get MutexModelFinalizer => _platform.MutexModelFinalizer;

  DropFnType get dropOpaqueMutexOptionHandle =>
      _platform.inner.drop_opaque_MutexOptionHandle;
  ShareFnType get shareOpaqueMutexOptionHandle =>
      _platform.inner.share_opaque_MutexOptionHandle;
  OpaqueTypeFinalizer get MutexOptionHandleFinalizer =>
      _platform.MutexOptionHandleFinalizer;

  DropFnType get dropOpaqueMutexOptionMpscReceiverAction =>
      _platform.inner.drop_opaque_MutexOptionMpscReceiverAction;
  ShareFnType get shareOpaqueMutexOptionMpscReceiverAction =>
      _platform.inner.share_opaque_MutexOptionMpscReceiverAction;
  OpaqueTypeFinalizer get MutexOptionMpscReceiverActionFinalizer =>
      _platform.MutexOptionMpscReceiverActionFinalizer;

  DropFnType get dropOpaqueNetStatus => _platform.inner.drop_opaque_NetStatus;
  ShareFnType get shareOpaqueNetStatus =>
      _platform.inner.share_opaque_NetStatus;
  OpaqueTypeFinalizer get NetStatusFinalizer => _platform.NetStatusFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Duration _wire2api_Chrono_Duration(dynamic raw) {
    return wire2apiDuration(_wire2api_i64(raw));
  }

  DateTime _wire2api_Chrono_Naive(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  MutexModel _wire2api_MutexModel(dynamic raw) {
    return MutexModel.fromRaw(raw[0], raw[1], this);
  }

  MutexOptionHandle _wire2api_MutexOptionHandle(dynamic raw) {
    return MutexOptionHandle.fromRaw(raw[0], raw[1], this);
  }

  MutexOptionMpscReceiverAction _wire2api_MutexOptionMpscReceiverAction(
      dynamic raw) {
    return MutexOptionMpscReceiverAction.fromRaw(raw[0], raw[1], this);
  }

  NetStatus _wire2api_NetStatus(dynamic raw) {
    return NetStatus.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Balance _wire2api_balance(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Balance(
      field0: _wire2api_f64(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DetailDailyWrap _wire2api_box_autoadd_detail_daily_wrap(dynamic raw) {
    return _wire2api_detail_daily_wrap(raw);
  }

  DetailDailyPoint _wire2api_detail_daily_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DetailDailyPoint(
      day: _wire2api_u32(arr[0]),
      flux: _wire2api_flux(arr[1]),
    );
  }

  DetailDailyWrap _wire2api_detail_daily_wrap(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DetailDailyWrap(
      details: _wire2api_list_detail_daily_point(arr[0]),
      nowMonth: _wire2api_u32(arr[1]),
      nowDay: _wire2api_u32(arr[2]),
      maxFlux: _wire2api_flux(arr[3]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Flux _wire2api_flux(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Flux(
      field0: _wire2api_u64(arr[0]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<DetailDailyPoint> _wire2api_list_detail_daily_point(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_detail_daily_point).toList();
  }

  List<NetDetail> _wire2api_list_net_detail(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_net_detail).toList();
  }

  NetDateTime _wire2api_net_date_time(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NetDateTime(
      field0: _wire2api_Chrono_Naive(arr[0]),
    );
  }

  NetDetail _wire2api_net_detail(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NetDetail(
      loginTime: _wire2api_net_date_time(arr[0]),
      logoutTime: _wire2api_net_date_time(arr[1]),
      flux: _wire2api_flux(arr[2]),
    );
  }

  NetFlux _wire2api_net_flux(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return NetFlux(
      username: _wire2api_String(arr[0]),
      flux: _wire2api_flux(arr[1]),
      onlineTime: _wire2api_new_duration(arr[2]),
      balance: _wire2api_balance(arr[3]),
    );
  }

  NetState _wire2api_net_state(dynamic raw) {
    return NetState.values[raw as int];
  }

  NetStateWrap _wire2api_net_state_wrap(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NetStateWrap(
      field0: _wire2api_net_state(arr[0]),
    );
  }

  NewDuration _wire2api_new_duration(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewDuration(
      field0: _wire2api_Chrono_Duration(arr[0]),
    );
  }

  DetailDailyWrap? _wire2api_opt_box_autoadd_detail_daily_wrap(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_detail_daily_wrap(raw);
  }

  Runtime _wire2api_runtime(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Runtime(
      bridge: this,
      rx: _wire2api_MutexOptionMpscReceiverAction(arr[0]),
      model: _wire2api_MutexModel(arr[1]),
      handle: _wire2api_MutexOptionHandle(arr[2]),
    );
  }

  RuntimeStartConfig _wire2api_runtime_start_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RuntimeStartConfig(
      bridge: this,
      status: _wire2api_NetStatus(arr[0]),
      username: _wire2api_String(arr[1]),
      password: _wire2api_String(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UpdateMsg _wire2api_update_msg(dynamic raw) {
    return UpdateMsg.values[raw as int];
  }

  UpdateMsgWrap _wire2api_update_msg_wrap(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UpdateMsgWrap(
      field0: _wire2api_update_msg(arr[0]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_net_state(NetState raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_net_status_simp(NetStatusSimp raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  wire_MutexModel api2wire_MutexModel(MutexModel raw) {
    final ptr = inner.new_MutexModel();
    _api_fill_to_wire_MutexModel(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexOptionHandle api2wire_MutexOptionHandle(MutexOptionHandle raw) {
    final ptr = inner.new_MutexOptionHandle();
    _api_fill_to_wire_MutexOptionHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexOptionMpscReceiverAction api2wire_MutexOptionMpscReceiverAction(
      MutexOptionMpscReceiverAction raw) {
    final ptr = inner.new_MutexOptionMpscReceiverAction();
    _api_fill_to_wire_MutexOptionMpscReceiverAction(raw, ptr);
    return ptr;
  }

  @protected
  wire_NetStatus api2wire_NetStatus(NetStatus raw) {
    final ptr = inner.new_NetStatus();
    _api_fill_to_wire_NetStatus(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_NetStateWrap> api2wire_box_autoadd_net_state_wrap(
      NetStateWrap raw) {
    final ptr = inner.new_box_autoadd_net_state_wrap_0();
    _api_fill_to_wire_net_state_wrap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Runtime> api2wire_box_autoadd_runtime(Runtime raw) {
    final ptr = inner.new_box_autoadd_runtime_0();
    _api_fill_to_wire_runtime(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RuntimeStartConfig>
      api2wire_box_autoadd_runtime_start_config(RuntimeStartConfig raw) {
    final ptr = inner.new_box_autoadd_runtime_start_config_0();
    _api_fill_to_wire_runtime_start_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_NetStateWrap> api2wire_opt_box_autoadd_net_state_wrap(
      NetStateWrap? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_net_state_wrap(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _MutexModelFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexModelPtr);
  OpaqueTypeFinalizer get MutexModelFinalizer => _MutexModelFinalizer;
  late final OpaqueTypeFinalizer _MutexOptionHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexOptionHandlePtr);
  OpaqueTypeFinalizer get MutexOptionHandleFinalizer =>
      _MutexOptionHandleFinalizer;
  late final OpaqueTypeFinalizer _MutexOptionMpscReceiverActionFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexOptionMpscReceiverActionPtr);
  OpaqueTypeFinalizer get MutexOptionMpscReceiverActionFinalizer =>
      _MutexOptionMpscReceiverActionFinalizer;
  late final OpaqueTypeFinalizer _NetStatusFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_NetStatusPtr);
  OpaqueTypeFinalizer get NetStatusFinalizer => _NetStatusFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_MutexModel(
      MutexModel apiObj, wire_MutexModel wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexOptionHandle(
      MutexOptionHandle apiObj, wire_MutexOptionHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexOptionMpscReceiverAction(
      MutexOptionMpscReceiverAction apiObj,
      wire_MutexOptionMpscReceiverAction wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_NetStatus(NetStatus apiObj, wire_NetStatus wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_net_state_wrap(
      NetStateWrap apiObj, ffi.Pointer<wire_NetStateWrap> wireObj) {
    _api_fill_to_wire_net_state_wrap(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_runtime(
      Runtime apiObj, ffi.Pointer<wire_Runtime> wireObj) {
    _api_fill_to_wire_runtime(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_runtime_start_config(
      RuntimeStartConfig apiObj, ffi.Pointer<wire_RuntimeStartConfig> wireObj) {
    _api_fill_to_wire_runtime_start_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_net_state_wrap(
      NetStateWrap apiObj, wire_NetStateWrap wireObj) {
    wireObj.field0 = api2wire_net_state(apiObj.field0);
  }

  void _api_fill_to_wire_opt_box_autoadd_net_state_wrap(
      NetStateWrap? apiObj, ffi.Pointer<wire_NetStateWrap> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_net_state_wrap(apiObj, wireObj);
  }

  void _api_fill_to_wire_runtime(Runtime apiObj, wire_Runtime wireObj) {
    wireObj.rx = api2wire_MutexOptionMpscReceiverAction(apiObj.rx);
    wireObj.model = api2wire_MutexModel(apiObj.model);
    wireObj.handle = api2wire_MutexOptionHandle(apiObj.handle);
  }

  void _api_fill_to_wire_runtime_start_config(
      RuntimeStartConfig apiObj, wire_RuntimeStartConfig wireObj) {
    wireObj.status = api2wire_NetStatus(apiObj.status);
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_String(apiObj.password);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_flux_to_string(
    int port_,
    int f,
  ) {
    return _wire_flux_to_string(
      port_,
      f,
    );
  }

  late final _wire_flux_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_flux_to_string');
  late final _wire_flux_to_string =
      _wire_flux_to_stringPtr.asFunction<void Function(int, int)>();

  void wire_new__static_method__RuntimeStartConfig(
    int port_,
    int status,
    ffi.Pointer<wire_uint_8_list> ssid,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_new__static_method__RuntimeStartConfig(
      port_,
      status,
      ssid,
      username,
      password,
    );
  }

  late final _wire_new__static_method__RuntimeStartConfigPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new__static_method__RuntimeStartConfig');
  late final _wire_new__static_method__RuntimeStartConfig =
      _wire_new__static_method__RuntimeStartConfigPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new__static_method__Runtime(
    int port_,
  ) {
    return _wire_new__static_method__Runtime(
      port_,
    );
  }

  late final _wire_new__static_method__RuntimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_new__static_method__Runtime');
  late final _wire_new__static_method__Runtime =
      _wire_new__static_method__RuntimePtr.asFunction<void Function(int)>();

  void wire_start__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
    ffi.Pointer<wire_RuntimeStartConfig> config,
  ) {
    return _wire_start__method__Runtime(
      port_,
      that,
      config,
    );
  }

  late final _wire_start__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Runtime>,
                  ffi.Pointer<wire_RuntimeStartConfig>)>>(
      'wire_start__method__Runtime');
  late final _wire_start__method__Runtime =
      _wire_start__method__RuntimePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Runtime>,
              ffi.Pointer<wire_RuntimeStartConfig>)>();

  void wire_queue_credential__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
    ffi.Pointer<wire_uint_8_list> u,
    ffi.Pointer<wire_uint_8_list> p,
  ) {
    return _wire_queue_credential__method__Runtime(
      port_,
      that,
      u,
      p,
    );
  }

  late final _wire_queue_credential__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_Runtime>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_queue_credential__method__Runtime');
  late final _wire_queue_credential__method__Runtime =
      _wire_queue_credential__method__RuntimePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Runtime>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_queue_login__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_queue_login__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_queue_login__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_queue_login__method__Runtime');
  late final _wire_queue_login__method__Runtime =
      _wire_queue_login__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_queue_logout__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_queue_logout__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_queue_logout__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Runtime>)>>(
      'wire_queue_logout__method__Runtime');
  late final _wire_queue_logout__method__Runtime =
      _wire_queue_logout__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_queue_flux__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_queue_flux__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_queue_flux__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_queue_flux__method__Runtime');
  late final _wire_queue_flux__method__Runtime =
      _wire_queue_flux__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_queue_state__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
    ffi.Pointer<wire_NetStateWrap> s,
  ) {
    return _wire_queue_state__method__Runtime(
      port_,
      that,
      s,
    );
  }

  late final _wire_queue_state__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Runtime>,
                  ffi.Pointer<wire_NetStateWrap>)>>(
      'wire_queue_state__method__Runtime');
  late final _wire_queue_state__method__Runtime =
      _wire_queue_state__method__RuntimePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Runtime>,
              ffi.Pointer<wire_NetStateWrap>)>();

  void wire_queue_details__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_queue_details__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_queue_details__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Runtime>)>>(
      'wire_queue_details__method__Runtime');
  late final _wire_queue_details__method__Runtime =
      _wire_queue_details__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_log_busy__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_log_busy__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_log_busy__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_log_busy__method__Runtime');
  late final _wire_log_busy__method__Runtime =
      _wire_log_busy__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_log_text__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_log_text__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_log_text__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_log_text__method__Runtime');
  late final _wire_log_text__method__Runtime =
      _wire_log_text__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_flux__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_flux__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_flux__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_flux__method__Runtime');
  late final _wire_flux__method__Runtime = _wire_flux__method__RuntimePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_state__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_state__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_state__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_state__method__Runtime');
  late final _wire_state__method__Runtime = _wire_state__method__RuntimePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_status__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_status__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_status__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_status__method__Runtime');
  late final _wire_status__method__Runtime = _wire_status__method__RuntimePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_details__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_details__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_details__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_details__method__Runtime');
  late final _wire_details__method__Runtime = _wire_details__method__RuntimePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_detail_daily__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_detail_daily__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_detail_daily__method__RuntimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Runtime>)>>(
      'wire_detail_daily__method__Runtime');
  late final _wire_detail_daily__method__Runtime =
      _wire_detail_daily__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  void wire_username__method__Runtime(
    int port_,
    ffi.Pointer<wire_Runtime> that,
  ) {
    return _wire_username__method__Runtime(
      port_,
      that,
    );
  }

  late final _wire_username__method__RuntimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Runtime>)>>('wire_username__method__Runtime');
  late final _wire_username__method__Runtime =
      _wire_username__method__RuntimePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Runtime>)>();

  wire_MutexModel new_MutexModel() {
    return _new_MutexModel();
  }

  late final _new_MutexModelPtr =
      _lookup<ffi.NativeFunction<wire_MutexModel Function()>>('new_MutexModel');
  late final _new_MutexModel =
      _new_MutexModelPtr.asFunction<wire_MutexModel Function()>();

  wire_MutexOptionHandle new_MutexOptionHandle() {
    return _new_MutexOptionHandle();
  }

  late final _new_MutexOptionHandlePtr =
      _lookup<ffi.NativeFunction<wire_MutexOptionHandle Function()>>(
          'new_MutexOptionHandle');
  late final _new_MutexOptionHandle =
      _new_MutexOptionHandlePtr.asFunction<wire_MutexOptionHandle Function()>();

  wire_MutexOptionMpscReceiverAction new_MutexOptionMpscReceiverAction() {
    return _new_MutexOptionMpscReceiverAction();
  }

  late final _new_MutexOptionMpscReceiverActionPtr = _lookup<
          ffi.NativeFunction<wire_MutexOptionMpscReceiverAction Function()>>(
      'new_MutexOptionMpscReceiverAction');
  late final _new_MutexOptionMpscReceiverAction =
      _new_MutexOptionMpscReceiverActionPtr
          .asFunction<wire_MutexOptionMpscReceiverAction Function()>();

  wire_NetStatus new_NetStatus() {
    return _new_NetStatus();
  }

  late final _new_NetStatusPtr =
      _lookup<ffi.NativeFunction<wire_NetStatus Function()>>('new_NetStatus');
  late final _new_NetStatus =
      _new_NetStatusPtr.asFunction<wire_NetStatus Function()>();

  ffi.Pointer<wire_NetStateWrap> new_box_autoadd_net_state_wrap_0() {
    return _new_box_autoadd_net_state_wrap_0();
  }

  late final _new_box_autoadd_net_state_wrap_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NetStateWrap> Function()>>(
          'new_box_autoadd_net_state_wrap_0');
  late final _new_box_autoadd_net_state_wrap_0 =
      _new_box_autoadd_net_state_wrap_0Ptr
          .asFunction<ffi.Pointer<wire_NetStateWrap> Function()>();

  ffi.Pointer<wire_Runtime> new_box_autoadd_runtime_0() {
    return _new_box_autoadd_runtime_0();
  }

  late final _new_box_autoadd_runtime_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Runtime> Function()>>(
          'new_box_autoadd_runtime_0');
  late final _new_box_autoadd_runtime_0 = _new_box_autoadd_runtime_0Ptr
      .asFunction<ffi.Pointer<wire_Runtime> Function()>();

  ffi.Pointer<wire_RuntimeStartConfig>
      new_box_autoadd_runtime_start_config_0() {
    return _new_box_autoadd_runtime_start_config_0();
  }

  late final _new_box_autoadd_runtime_start_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RuntimeStartConfig> Function()>>(
      'new_box_autoadd_runtime_start_config_0');
  late final _new_box_autoadd_runtime_start_config_0 =
      _new_box_autoadd_runtime_start_config_0Ptr
          .asFunction<ffi.Pointer<wire_RuntimeStartConfig> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_MutexModel(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexModel(
      ptr,
    );
  }

  late final _drop_opaque_MutexModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexModel');
  late final _drop_opaque_MutexModel = _drop_opaque_MutexModelPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexModel(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexModel(
      ptr,
    );
  }

  late final _share_opaque_MutexModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MutexModel');
  late final _share_opaque_MutexModel = _share_opaque_MutexModelPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexOptionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexOptionHandle(
      ptr,
    );
  }

  late final _drop_opaque_MutexOptionHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexOptionHandle');
  late final _drop_opaque_MutexOptionHandle = _drop_opaque_MutexOptionHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexOptionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexOptionHandle(
      ptr,
    );
  }

  late final _share_opaque_MutexOptionHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MutexOptionHandle');
  late final _share_opaque_MutexOptionHandle =
      _share_opaque_MutexOptionHandlePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexOptionMpscReceiverAction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexOptionMpscReceiverAction(
      ptr,
    );
  }

  late final _drop_opaque_MutexOptionMpscReceiverActionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexOptionMpscReceiverAction');
  late final _drop_opaque_MutexOptionMpscReceiverAction =
      _drop_opaque_MutexOptionMpscReceiverActionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexOptionMpscReceiverAction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexOptionMpscReceiverAction(
      ptr,
    );
  }

  late final _share_opaque_MutexOptionMpscReceiverActionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_MutexOptionMpscReceiverAction');
  late final _share_opaque_MutexOptionMpscReceiverAction =
      _share_opaque_MutexOptionMpscReceiverActionPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_NetStatus(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_NetStatus(
      ptr,
    );
  }

  late final _drop_opaque_NetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_NetStatus');
  late final _drop_opaque_NetStatus = _drop_opaque_NetStatusPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_NetStatus(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_NetStatus(
      ptr,
    );
  }

  late final _share_opaque_NetStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_NetStatus');
  late final _share_opaque_NetStatus = _share_opaque_NetStatusPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MutexOptionMpscReceiverAction extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexModel extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexOptionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Runtime extends ffi.Struct {
  external wire_MutexOptionMpscReceiverAction rx;

  external wire_MutexModel model;

  external wire_MutexOptionHandle handle;
}

final class wire_NetStatus extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_RuntimeStartConfig extends ffi.Struct {
  external wire_NetStatus status;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;
}

final class wire_NetStateWrap extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
