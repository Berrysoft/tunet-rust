#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_new__static_method__Runtime_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__Runtime",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Runtime::new(),
    )
}
fn wire_start__method__Runtime_impl(port_: MessagePort, that: impl Wire2Api<Runtime> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "start__method__Runtime",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(Runtime::start(&api_that, task_callback.stream_sink()))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_UpdateMsg(UpdateMsg);

// Section: static checks

const _: fn() = || match None::<UpdateMsg>.unwrap() {
    UpdateMsg::Credential => {}
    UpdateMsg::State => {}
    UpdateMsg::Status => {}
    UpdateMsg::Log => {}
    UpdateMsg::Flux => {}
    UpdateMsg::Online => {}
    UpdateMsg::Details => {}
    UpdateMsg::LogBusy => {}
    UpdateMsg::OnlineBusy => {}
    UpdateMsg::DetailBusy => {}
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

// Section: impl IntoDart

impl support::IntoDart for Runtime {
    fn into_dart(self) -> support::DartAbi {
        vec![self.rx.into_dart(), self.model.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Runtime {}

impl support::IntoDart for mirror_UpdateMsg {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            UpdateMsg::Credential => 0,
            UpdateMsg::State => 1,
            UpdateMsg::Status => 2,
            UpdateMsg::Log => 3,
            UpdateMsg::Flux => 4,
            UpdateMsg::Online => 5,
            UpdateMsg::Details => 6,
            UpdateMsg::LogBusy => 7,
            UpdateMsg::OnlineBusy => 8,
            UpdateMsg::DetailBusy => 9,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_UpdateMsg {}
impl support::IntoDart for UpdateMsgWrap {
    fn into_dart(self) -> support::DartAbi {
        vec![mirror_UpdateMsg(self.0).into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UpdateMsgWrap {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
