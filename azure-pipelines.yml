trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .github/
      - assets/
      - README.md

jobs:
- job: Build_Windows
  strategy:
    matrix:
      x64:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'tunet.win.x86_64'
        wixArch: x64
      x86:
        target: 'i686-pc-windows-msvc'
        publishName: 'tunet.win.i686'
        wixArch: x86
      arm64:
        target: 'aarch64-pc-windows-msvc'
        publishName: 'tunet.win.aarch64'
        wixArch: arm64
  pool:
    vmImage: windows-latest
  
  steps:
  - script: |
      rustup target add $(target)
      cargo build --release --target $(target)
    displayName: "Build"

  - pwsh: |
      cd target/$(target)/release
      cp tunet.exe $(Build.BinariesDirectory)/
      cp tunet-cui.exe $(Build.BinariesDirectory)/
      cp tunet-gui.exe $(Build.BinariesDirectory)/
      cp tunet-service.exe $(Build.BinariesDirectory)/
    displayName: 'Copy Binaries'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive'

  - pwsh: |
      dotnet tool install --global wix --version 4.0.0
      wix extension add --global WixToolset.UI.wixext/4.0.0
      wix build wix/main.wix -ext WixToolset.UI.wixext -arch $(wixArch) -define target=$(target) -define arch=$(wixArch) -o $(Build.ArtifactStagingDirectory)/$(publishName).msi -pdbtype none
    displayName: 'Package MSI'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Ubuntu
  strategy:
    matrix:
      x64:
        target: 'x86_64-unknown-linux-gnu'
        publishName: 'tunet.focal.x86_64'
        cross: ''
      arm64:
        target: 'aarch64-unknown-linux-gnu'
        publishName: 'tunet.focal.aarch64'
        cross: 'arm64'
      riscv64:
        target: 'riscv64gc-unknown-linux-gnu'
        publishName: 'tunet.focal.riscv64gc'
        cross: 'riscv64'
  pool:
    vmImage: 'ubuntu-20.04'
  
  steps:
  - script: |
      sudo dpkg --add-architecture $(cross)

      sudo rm /etc/apt/sources.list.d/microsoft-prod.list
      sudo sed -i "s/deb-src/deb-src [arch=amd64]/" /etc/apt/sources.list
      sudo sed -i "s/deb/deb [arch=amd64]/" /etc/apt/sources.list
      sudo sed -i "s/deb-src/deb-src [arch=amd64]/" /etc/apt/sources.list.d/*
      sudo sed -i "s/deb/deb [arch=amd64]/" /etc/apt/sources.list.d/*
      sudo tee /etc/apt/sources.list.d/$(cross)-cross-compile-sources.list > /dev/null <<EOT
      deb [arch=$(cross)] http://ports.ubuntu.com/ focal main restricted universe multiverse
      deb [arch=$(cross)] http://ports.ubuntu.com/ focal-updates main restricted universe multiverse
      deb [arch=$(cross)] http://ports.ubuntu.com/ focal-backports main restricted universe multiverse
      EOT

      sudo apt-get update
      sudo apt-get install crossbuild-essential-$(cross):amd64 libc6-dev-$(cross)-cross:amd64 libssl-dev:$(cross) libssl1.1:$(cross) libc6:$(cross) libgcc-s1:$(cross) libfreetype-dev:$(cross)
    displayName: "Install cross-build packages"
    condition: ne(variables.cross, '')

  - script: cargo install cargo-deb
    displayName: "Install cargo-deb"

  - script: |
      rustup target add $(target)
      cargo build --release --target $(target)
    displayName: "Build"
    env:
      PKG_CONFIG_ALLOW_CROSS: 1

  - script: |
      cargo deb --target $(target) --no-build -o $(Build.ArtifactStagingDirectory)/$(publishName).deb -p tunet
    displayName: "Package"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-latest'
  
  steps:
  - script: |
      rustup target add x86_64-apple-darwin
      cargo build --release --target x86_64-apple-darwin
    displayName: "Build x64"

  - script: |
      rustup target add aarch64-apple-darwin
      cargo build --release --target aarch64-apple-darwin
    displayName: "Build arm64"

  - script: |
      macbundle/bundle.sh
      cp target/macbundle/tunet.app.zip $(Build.ArtifactStagingDirectory)/tunet.mac.app.zip
    displayName: "Create bundle"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
