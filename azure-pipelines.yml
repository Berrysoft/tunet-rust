trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .github/
      - assets/
      - README.md

parameters:
- name: packages
  type: object
  default:
  - tunet
  - tunet-cui
  - tunet-gui
  - tunet-service

jobs:
- job: Build_Windows
  strategy:
    matrix:
      x64:
        image: 'windows-latest'
        target: 'x86_64-pc-windows-msvc'
        publishName: 'win.x86_64'
      x86:
        image: 'windows-latest'
        target: 'i686-pc-windows-msvc'
        publishName: 'win.i686'
      arm64:
        image: 'windows-latest'
        target: 'aarch64-pc-windows-msvc'
        publishName: 'win.aarch64'
  pool:
    vmImage: $(image)
  
  steps:
  - script: |
      rustup target add $(target)
      cargo build --release --target $(target)
    displayName: "Build"

  - pwsh: |
      cd target/$(target)/release
      cp tunet.exe $(Build.BinariesDirectory)/
      cp tunet-cui.exe $(Build.BinariesDirectory)/
      cp tunet-gui.exe $(Build.BinariesDirectory)/
      cp tunet-service.exe $(Build.BinariesDirectory)/
    displayName: 'Copy Binaries'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Linux
  strategy:
    matrix:
      linux-x64:
        image: 'ubuntu-20.04'
        target: 'x86_64-unknown-linux-gnu'
        publishName: 'linux.x86_64'
        rustflags: ''
        cross: ''
      linux-arm64:
        image: 'ubuntu-20.04'
        target: 'aarch64-unknown-linux-gnu'
        publishName: 'linux.aarch64'
        rustflags: '-C linker=aarch64-linux-gnu-gcc'
        cross: 'arm64'
      linux-riscv64:
        image: 'ubuntu-20.04'
        target: 'riscv64gc-unknown-linux-gnu'
        publishName: 'linux.aarch64'
        rustflags: '-C linker=riscv64-linux-gnu-gcc'
        cross: 'riscv64'
  pool:
    vmImage: $(image)
  
  steps:
  - script: |
      sudo dpkg --add-architecture $(cross)
      sudo apt-get update
      sudo apt-get install crossbuild-essential-$(cross) libc6-dev-$(cross)-cross libssl-dev:$(cross)
    displayName: "Install cross-build packages"
    condition: ne(variables.cross, '')

  - script: cargo install cargo-deb
    displayName: "Install cargo-deb"

  - script: rustup target add $(target)
    displayName: "Add rust target $(target)"

  - ${{ each p in parameters.packages }}:
    - script: |
        cargo deb --target $(target) -o $(Build.ArtifactStagingDirectory) -p ${{ p }}
      displayName: "Package ${{ p }}"
      env:
        RUSTFLAGS: $(rustflags)

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-latest'
  
  steps:
  - script: |
      rustup target add x86_64-apple-darwin
      rustup target add aarch64-apple-darwin
      cargo build --release --target x86_64-apple-darwin
      cargo build --release --target aarch64-apple-darwin
    displayName: "Build"

  - script: |
      lipo -create target/x86_64-apple-darwin/release/tunet target/aarch64-apple-darwin/release/tunet -output $(Build.BinariesDirectory)/tunet
      lipo -create target/x86_64-apple-darwin/release/tunet-cui target/aarch64-apple-darwin/release/tunet-cui -output $(Build.BinariesDirectory)/tunet-cui
      lipo -create target/x86_64-apple-darwin/release/tunet-gui target/aarch64-apple-darwin/release/tunet-gui -output $(Build.BinariesDirectory)/tunet-gui
      lipo -create target/x86_64-apple-darwin/release/tunet-service target/aarch64-apple-darwin/release/tunet-service -output $(Build.BinariesDirectory)/tunet-service
    displayName: "Create fat binary"

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/mac.universal.zip'
    displayName: 'Archive'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
