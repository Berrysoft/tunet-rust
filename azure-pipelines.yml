# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: Build
  strategy:
    matrix:
      linux-x64:
        os: 'ubuntu'
        imageName: 'ubuntu-18.04'
        target: 'x86_64-unknown-linux-gnu'
        exeName: 'tunet'
        publishName: 'tunet.linux.x86_64'
        publishGuiName: 'tunet-gui.linux.x86_64'
        preCmakeCmd: ''
        cmakeArgs: '-DUSE_QT5=on -DCMAKE_CXX_COMPILER=g++-11'
      osx-x64:
        os: 'mac'
        imageName: 'macOS-11'
        target: 'x86_64-apple-darwin'
        exeName: 'tunet'
        publishName: 'tunet.macos.x86_64'
        publishGuiName: 'tunet-gui.macos.x86_64'
        preCmakeCmd: ''
        cmakeArgs: ''
      osx-arm64:
        os: 'mac'
        imageName: 'macOS-11'
        target: 'aarch64-apple-darwin'
        exeName: 'tunet'
        publishName: 'tunet.macos.aarch64'
        publishGuiName: 'tunet-gui.macos.aarch64'
        preCmakeCmd: ''
        cmakeArgs: '-DCMAKE_OSX_ARCHITECTURES="arm64"'
      win-x64:
        os: 'windows'
        imageName: 'windows-latest'
        target: 'x86_64-pc-windows-msvc'
        exeName: 'tunet.exe'
        publishName: 'tunet.win.x86_64.exe'
        publishGuiName: 'tunet-gui.win.x86_64'
        preCmakeCmd: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmakeArgs: '-DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/6.2.0/msvc2019_64"'
  pool:
    vmImage: $(imageName)
  
  steps:
  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt update
      sudo apt install qtbase5-dev libqt5charts5-dev qt5-qmake ninja-build g++-11
    displayName: "Install Qt on Linux"
    condition: eq(variables.os, 'ubuntu')

  - script: |
      brew install qt cmake ninja
    displayName: "Install Qt on MacOS"
    condition: eq(variables.os, 'mac')

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
    condition: eq(variables.os, 'windows')
  
  - pwsh: |
      python3 -m pip install aqtinstall
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt windows desktop 6.2.0 win64_msvc2019_64 -m qtcharts
    displayName: "Install Qt on Windows"
    condition: eq(variables.os, 'windows')
  
  - script: |
      rustup target add $(target)
      cargo build --release --target $(target)
      $(preCmakeCmd)
      cd tunet-gui
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DRUST_TARGET="$(target)" -DCMAKE_INSTALL_PREFIX="$(Build.ArtifactStagingDirectory)/$(publishGuiName)" $(cmakeArgs)
      ninja install
    displayName: "Build"

  - pwsh: cp target/$(target)/release/$(exeName) $(Build.ArtifactStagingDirectory)/$(publishName)
    displayName: 'Copy CLI binaries'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: FatBinary_CLI
  dependsOn: Build
  condition: succeeded('Build')
  pool:
    vmImage: 'macOS-11'
  
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'publish'
      path: $(Build.SourcesDirectory)/publish

  - script: lipo -create $(Build.SourcesDirectory)/publish/tunet.macos.x86_64 $(Build.SourcesDirectory)/publish/tunet.macos.aarch64 -output $(Build.ArtifactStagingDirectory)/tunet.macos
    displayName: "Create fat binary"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
