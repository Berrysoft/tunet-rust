# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: Build_Windows
  strategy:
    matrix:
      win-x64:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'win.x86_64'
        vsArch: 'x64'
        qtDist: 'msvc2019_64'
        qtDistFull: 'win64_msvc2019_64'
  pool:
    vmImage: 'windows-latest'
  
  steps:
  - pwsh: |
      python3 -m pip install aqtinstall
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt windows desktop 6.2.1 $(qtDistFull) -m qtcharts
    displayName: "Install Qt on Windows"
  
  - script: |
      rustup target add $(target)
      cargo build --release --target $(target)
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(vsArch)
      cd tunet-gui
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DRUST_TARGET="$(target)" -DCMAKE_INSTALL_PREFIX="$(Build.BinariesDirectory)/$(publishName)" -DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/6.2.1/$(qtDist)"
      ninja install
    displayName: "Build"

  - pwsh: cp target/$(target)/release/tunet.exe $(Build.BinariesDirectory)/$(publishName)/bin/
    displayName: 'Copy CLI binaries'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/$(publishName)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive GUI binaries'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Linux
  pool:
    vmImage: 'ubuntu-18.04'
  
  steps:
  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt update
      sudo apt install qtbase5-dev libqt5charts5-dev qt5-qmake ninja-build g++-11
    displayName: "Install Qt on Linux"

  - script: |
      cargo build --release
      cd tunet-gui
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(Build.ArtifactStagingDirectory)/tunet-gui.linux.x86_64" -DCMAKE_CXX_COMPILER=g++-11
      ninja install
    displayName: "Build"

  - script: cp target/release/tunet $(Build.ArtifactStagingDirectory)/tunet.linux.x86_64
    displayName: 'Copy CLI binaries'

  - script: |
      cd tunet-gui/build
      cpack -G DEB
      cp *.deb $(Build.ArtifactStagingDirectory)/tunet-gui.linux.x86_64/
    displayName: 'Pack'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-11'
  
  steps:
  - script: |
      brew install cmake ninja
      python3 -m pip install aqtinstall
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt mac desktop 6.2.1 clang_64 -m qtcharts
    displayName: "Install Qt on MacOS"

  - script: |
      rustup target add aarch64-apple-darwin
      cargo build --release --target x86_64-apple-darwin
      cargo build --release --target aarch64-apple-darwin
    displayName: "Build Rust part"

  - script: |
      cd tunet-gui
      mkdir build
      cd build
      mkdir x64
      cd x64
      cmake ../.. -GNinja -DCMAKE_BUILD_TYPE=Release -DRUST_TARGET="x86_64-apple-darwin" -DCMAKE_INSTALL_PREFIX="$(Build.BinariesDirectory)/tunet-gui.macos.x86_64" -DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/6.2.1/macos"
      ninja install
      cd ..
      mkdir arm64
      cd arm64
      cmake ../.. -GNinja -DCMAKE_BUILD_TYPE=Release -DRUST_TARGET="aarch64-apple-darwin" -DCMAKE_INSTALL_PREFIX="$(Build.BinariesDirectory)/tunet-gui.macos.aarch64" -DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/6.2.1/macos" -DCMAKE_OSX_ARCHITECTURES="arm64"
      ninja install
    displayName: "Build C++ part"

  - script: |
      mkdir -p target/release
      lipo -create target/x86_64-apple-darwin/release/tunet target/aarch64-apple-darwin/release/tunet -output target/release/tunet
      cd $(Build.BinariesDirectory)
      mkdir -p tunet-gui.macos
      cp -R tunet-gui.macos.x86_64/bin tunet-gui.macos/
      rm tunet-gui.macos/bin/tunet-gui.app/Contents/MacOS/tunet-gui
      lipo -create tunet-gui.macos.x86_64/bin/tunet-gui.app/Contents/MacOS/tunet-gui tunet-gui.macos.aarch64/bin/tunet-gui.app/Contents/MacOS/tunet-gui -output tunet-gui.macos/bin/tunet-gui.app/Contents/MacOS/tunet-gui
    displayName: "Create fat binary"

  - script: cp target/release/tunet $(Build.ArtifactStagingDirectory)/tunet.macos
    displayName: 'Copy CLI binaries'

  - script: |
      cd $(Build.BinariesDirectory)/tunet-gui.macos/bin
      zip -r -y tunet-gui.app.zip tunet-gui.app
      mkdir -p $(Build.ArtifactStagingDirectory)/tunet-gui.macos
      cp tunet-gui.app.zip $(Build.ArtifactStagingDirectory)/tunet-gui.macos/
    displayName: 'Archive app'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
