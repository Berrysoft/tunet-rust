trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .github/
      - assets/
      - README.md

jobs:
- job: Build_Windows
  strategy:
    matrix:
      x64:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'tunet.win.x86_64'
        wixArch: x64
      x86:
        target: 'i686-pc-windows-msvc'
        publishName: 'tunet.win.i686'
        wixArch: x86
      arm64:
        target: 'aarch64-pc-windows-msvc'
        publishName: 'tunet.win.aarch64'
        wixArch: arm64
  pool:
    vmImage: windows-latest
  
  steps:
  - script: |
      rustup target add $(target)
      cargo build --release --workspace --exclude native --target $(target)
    displayName: "Build"

  - pwsh: |
      cd target/$(target)/release
      cp tunet.exe $(Build.BinariesDirectory)/
      cp tunet-cui.exe $(Build.BinariesDirectory)/
      cp tunet-gui.exe $(Build.BinariesDirectory)/
      cp tunet-service.exe $(Build.BinariesDirectory)/
    displayName: 'Copy Binaries'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive'

  - pwsh: |
      dotnet tool install --global wix --version 4.0.0
      wix extension add --global WixToolset.UI.wixext/4.0.0
      wix build wix/main.wix -ext WixToolset.UI.wixext -arch $(wixArch) -define target=$(target) -define arch=$(wixArch) -culture zh-cn -o $(Build.ArtifactStagingDirectory)/$(publishName).msi -pdbtype none
    displayName: 'Package MSI'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Ubuntu
  strategy:
    matrix:
      jammy-x64:
        image: 'ubuntu-22.04'
        ubuntuDist: 'jammy'
        target: 'x86_64-unknown-linux-gnu'
        arch: 'x86_64'
      noble-x64:
        image: 'ubuntu-24.04'
        ubuntuDist: 'noble'
        target: 'x86_64-unknown-linux-gnu'
        arch: 'x86_64'
  pool:
    vmImage: $(image)
  
  steps:
  - script: cargo install cargo-deb
    displayName: "Install cargo-deb"

  - script: |
      rustup target add $(target)
      cargo build --release --workspace --exclude native --target $(target)
    displayName: "Build"

  - script: |
      cargo deb --target $(target) --no-build -o $(Build.ArtifactStagingDirectory)/tunet.$(ubuntuDist).$(arch).deb -p tunet
    displayName: "Package"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-13'
  
  steps:
  - script: |
      rustup target add x86_64-apple-darwin
      cargo build --release --workspace --exclude native --target x86_64-apple-darwin
    displayName: "Build x64"

  - script: |
      rustup target add aarch64-apple-darwin
      cargo build --release --workspace --exclude native --target aarch64-apple-darwin
    displayName: "Build arm64"

  - script: |
      macbundle/bundle.sh
      cp target/macbundle/tunet.app.zip $(Build.ArtifactStagingDirectory)/tunet.mac.app.zip
    displayName: "Create bundle"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Android
  pool:
    vmImage: 'ubuntu-22.04'
  variables:
  - group: 'Android sign'
  
  steps:
  - script: |
      rustup target add x86_64-linux-android
      rustup target add armv7-linux-androideabi
      rustup target add aarch64-linux-android
      cargo install cargo-ndk
    displayName: 'Install cargo-ndk'

  - script: |
      sudo snap install flutter --classic
    displayName: 'Install flutter'

  - task: DownloadSecureFile@1
    name: keystore
    displayName: 'Download keystore'
    inputs:
      secureFile: 'keystore.jks'
  
  - script: |
      cd tunet-flutter
      cat > android/key.properties << EOL
      storePassword=$(store-password)
      keyPassword=$(key-password)
      keyAlias=$(key-alias)
      storeFile=$(keystore.secureFilePath)
      EOL
      export JAVA_HOME=$(JAVA_HOME_17_X64)
      make apk
      cp build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk $(Build.ArtifactStagingDirectory)/tunet.armeabi-v7a.apk
      cp build/app/outputs/flutter-apk/app-arm64-v8a-release.apk $(Build.ArtifactStagingDirectory)/tunet.arm64-v8a.apk
      cp build/app/outputs/flutter-apk/app-x86_64-release.apk $(Build.ArtifactStagingDirectory)/tunet.x86_64.apk
    displayName: 'Build APK'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_iOS
  pool:
    vmImage: 'macOS-13'

  steps:
  - script: |
      brew install flutter
    displayName: 'Install flutter'

  - script: |
      rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios
      cd tunet-flutter
      flutter build ios --release --no-codesign
      mkdir -p ipa/Payload
      cp -r build/ios/iphoneos/Runner.app ./ipa/Payload
      cd ipa
      zip -r tunet.ios.ipa *
      cp tunet.ios.ipa $(Build.ArtifactStagingDirectory)/
    displayName: 'Build IPA'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
