# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .github/
      - assets/
      - README.md

jobs:
- job: Build_Windows
  strategy:
    matrix:
      win-x64:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'win.x86_64'
        vsArch: 'x64'
        qtVersion: '6.2.1'
        qtDistFull: 'win64_msvc2019_64'
        cross: false
        cmakeArgs: '-DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_64"'
      win-x64-qt5:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'win.x86_64.qt5'
        vsArch: 'x64'
        qtVersion: '5.15.2'
        qtDistFull: 'win64_msvc2019_64'
        cross: false
        cmakeArgs: '-DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_64" -DUSE_QT5=on'
      win-x86-qt5:
        target: 'i686-pc-windows-msvc'
        publishName: 'win.i686.qt5'
        vsArch: 'x64_x86'
        qtVersion: '5.15.2'
        qtDistFull: 'win32_msvc2019'
        cross: false
        cmakeArgs: '-DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019" -DUSE_QT5=on'
      win-arm64:
        target: 'aarch64-pc-windows-msvc'
        publishName: 'win.aarch64'
        vsArch: 'x64_arm64'
        qtVersion: '6.2.1'
        qtDistFull: 'win64_msvc2019_arm64'
        cross: true
        qtHostFull: 'win64_msvc2019_64'
        cmakeArgs: '-DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_arm64;$(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_64"'
  pool:
    vmImage: 'windows-latest'
  
  steps:
  - checkout: self
    submodules: true

  - pwsh: |
      python3 -m pip install aqtinstall
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt windows desktop $(qtVersion) $(qtDistFull) -m qtcharts
    displayName: "Install Qt"

  - pwsh: |
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt windows desktop $(qtVersion) $(qtHostFull) -m qtcharts
      cp $(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_64/bin/qmake.exe $(Build.BinariesDirectory)/Qt/$(qtVersion)/msvc2019_arm64/bin/
    displayName: "Install Qt host"
    condition: eq(variables.cross, 'true')
  
  - script: |
      rustup target add $(target)
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(vsArch)
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DRust_CARGO_TARGET="$(target)" -DCMAKE_INSTALL_PREFIX="$(Build.BinariesDirectory)/$(publishName)" $(cmakeArgs)
      ninja install
    displayName: "Build"

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/$(publishName)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Linux
  pool:
    vmImage: 'ubuntu-18.04'
  
  steps:
  - checkout: self
    submodules: true

  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt update
      sudo apt install qtbase5-dev libqt5charts5-dev qt5-qmake ninja-build g++-11
    displayName: "Install Qt"

  - script: |
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(Build.ArtifactStagingDirectory)/linux.x86_64" -DUSE_QT5=on -DCMAKE_CXX_COMPILER=g++-11
      ninja install
    displayName: "Build"

  - script: |
      cd build
      cpack -G DEB
      cp *.deb $(Build.ArtifactStagingDirectory)/linux.x86_64/
    displayName: 'Pack'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-11'
  
  steps:
  - checkout: self
    submodules: true

  - script: |
      brew install cmake ninja
      python3 -m pip install aqtinstall
      python3 -m aqt install-qt --outputdir $(Build.BinariesDirectory)/Qt mac desktop 6.2.1 clang_64 -m qtcharts
    displayName: "Install Qt"

  - script: |
      rustup target add x86_64-apple-darwin
      rustup target add aarch64-apple-darwin
      cargo build --release --target x86_64-apple-darwin
      cargo build --release --target aarch64-apple-darwin
    displayName: "Build Rust part"

  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/macos
      lipo -create target/x86_64-apple-darwin/release/tunet target/aarch64-apple-darwin/release/tunet -output $(Build.ArtifactStagingDirectory)/macos/tunet
      lipo -create target/x86_64-apple-darwin/release/libtunet_model_native.a target/aarch64-apple-darwin/release/libtunet_model_native.a -output $(Build.ArtifactStagingDirectory)/macos/libtunet_model_native.a
    displayName: "Create fat binary"

  - script: |
      mkdir build
      cd build
      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(Build.BinariesDirectory)/macos" -DCMAKE_PREFIX_PATH="$(Build.BinariesDirectory)/Qt/6.2.1/macos" -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DUSE_CORROSION=off -DTUNET_MODEL_NATIVE_LIB_PATH="$(Build.ArtifactStagingDirectory)/macos/libtunet_model_native.a"
      ninja install
    displayName: "Build C++ part"

  - script: |
      cd $(Build.BinariesDirectory)/macos/bin
      python3 $(Build.SourcesDirectory)/macdepolyqtfix/macdeployqtfix.py $(Build.BinariesDirectory)/macos/bin/tunet-gui.app/Contents/MacOS/tunet-gui $(Build.BinariesDirectory)/Qt/6.2.1/macos
      zip -r -y tunet-gui.app.zip tunet-gui.app
      cp tunet-gui.app.zip $(Build.ArtifactStagingDirectory)/macos/
    displayName: 'Archive'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
